1
00:00:03,000 --> 00:00:08,000
Let's open MySQL Workbench, SQL Editor, and let's start with our very first example.

2
00:00:08,000 --> 00:00:14,000
First, we will understand how IN works. Once again, we will be using sakila.actor table.

3
00:00:14,000 --> 00:00:22,000
‘SELECT * FROM sakila.actor WHERE first_name IN (‘NICK', ‘JOHNNY', ‘JOE', ‘VIVIEN')'. What it means is that this

4
00:00:22,000 --> 00:00:28,000
query will return result where first_name is any of these names. Let's verify that. Select the statement and

5
00:00:28,000 --> 00:00:35,000
click on Execute. The data type of our literals was string, that's why we have a single code around them and they're

6
00:00:35,000 --> 00:00:42,000
all separated by comma. If the data type of our literal is integer, there is no need of single code around that.

7
00:00:42,000 --> 00:00:48,000
Let's see an example of that as well. Here it is. In this case, we have literals as integers.

8
00:00:48,000 --> 00:00:57,000
We do not need a single code around that. Our WHERE condition is ‘WHERE actor_id IN (1,2,3,4,5,6,7)'.

9
00:00:57,000 --> 00:01:02,000
Let's select the statement and click on Execute. You can see in the resultset, we have all the result

10
00:01:02,000 --> 00:01:10,000
‘WHERE actor_id' is (1,2,3,4,5,6,7). Well the implementation of IN is very simple as you can see that.

11
00:01:10,000 --> 00:01:15,000
Now we will quickly see the example of the subquery. On a very first glance, we can see there are two different

12
00:01:15,000 --> 00:01:20,000
queries over here. First query is that where we are ‘SELECTING * FROM sakila.actor WHERE first_name IN

13
00:01:20,000 --> 00:01:27,000
(‘NICK', ‘JOHNNY', ‘JOE', ‘VIVIEN')' and there is an OR condition over here, which is looking for actor_id IN

14
00:01:27,000 --> 00:01:30,000
and then the result of second query. Let's write now second query, which is

15
00:01:30,000 --> 00:01:37,000
‘(SELECT actor_id FROM sakila.actor WHERE last_name = ‘DEGENERES')'. Let's execute this query and see what is the

16
00:01:37,000 --> 00:01:44,000
resultset. When we run this resultset, we can see it returns us three distinct values, which is 41, 107, and 166.

17
00:01:44,000 --> 00:01:53,000
What it means is that there are three actors whose last_name is DEGENERES and their actor_id is 41, 107, and 166.

18
00:01:53,000 --> 00:01:57,000
That simplifies this query a lot. What it means is that ‘SELECT * FROM sakila.actor WHERE first_name IN

19
00:01:57,000 --> 00:02:08,000
(‘NICK', ‘JOHNNY', ‘JOE', ‘VIVIEN') OR actor_id IN (41, 107, 166). What it means is that we will get every record

20
00:02:08,000 --> 00:02:14,000
where first_name is either NICK, JOHNNY, JOE or VIVIEN. Additionally, there will be rows where actor_id will be

21
00:02:14,000 --> 00:02:21,000
41, 107, and 166. To evaluate our assumption, let's select entire query and click on Execute.

22
00:02:21,000 --> 00:02:26,000
Carefully observe the first_name column of the resultset. You can see the name belongs to NICK, JOHNNY, JOE or

23
00:02:26,000 --> 00:02:32,000
VIVIEN. Additionally, there should be three record where actor_id's go to 41, 107, and 166.

24
00:02:32,000 --> 00:02:41,000
In case of the actor_id 41, we can clearly see it's over here, actor_id 2, 5, 9, 14, and 40, the logic was

25
00:02:41,000 --> 00:02:48,000
first_name belonged to our four names. In case of the actor_id 41, the last_name was DEGENERES and that's the

26
00:02:48,000 --> 00:02:55,000
reason it qualified for this resultset. Same logic is for 107 as well. This record qualifies for both of the

27
00:02:55,000 --> 00:03:04,000
conditions. What it means is that, if we had a condition instead of OR and here, actor_id 166 will be still

28
00:03:04,000 --> 00:03:10,000
a valid resultset. Instead of OR right here, AND. Now, we will execute this and you can see only one record

29
00:03:10,000 --> 00:03:18,000
is now in our resultset. This record is here because the first_name is NICK and the last_name is DEGENERES.

30
00:03:18,000 --> 00:03:23,000
Now let's understand how BETWEEN clause works, but before that let's execute a simple query.

31
00:03:23,000 --> 00:03:31,000
‘SELECT * FROM sakila.actor WHERE actor_id &gt; 10 AND actor_id &lt; 20'. What it means is that it will get us every

32
00:03:31,000 --> 00:03:38,000
single actor_id, which is over 10 and less than 20. Let's select this and execute it. In the resultset, we have

33
00:03:38,000 --> 00:03:42,000
nine rows where actor_id is from 11 to 19.

34
00:03:42,000 --> 00:03:49,000
Here is an example: ‘SELECT * FROM sakila.actor WHERE actor_id BETWEEN 10 AND 20'. Now let's select this one

35
00:03:49,000 --> 00:03:55,000
and execute. When we execute this record, we can see that there are no more nine rows. The total number of the

36
00:03:55,000 --> 00:04:02,000
rows are 11. The difference between this query and the query, which we ran before, are row with actor_id 10 and

37
00:04:02,000 --> 00:04:09,000
row with actor_id 20. The reason is that the way the BETWEEN works is that it also includes both the ranges.

38
00:04:09,000 --> 00:04:14,000
What it means is that the 10 is also part of the range and 20 is also part of the range.

39
00:04:14,000 --> 00:04:21,000
The way the range logic works, in case of the BETWEEN is, lower range, upper range, and anything between them.

40
00:04:21,000 --> 00:04:26,000
If you want to simulate this query with using BETWEEN, you will have to change here something.

41
00:04:26,000 --> 00:04:32,000
Instead of 10, you are to replace that by 11 and instead of 20, you are to replace that by 19.

42
00:04:32,000 --> 00:04:39,000
Now, this query will be exactly similar to the query, which we have executed in the beginning just like this.

43
00:04:39,000 --> 00:04:46,000
Let's go further down. You can just put NOT before BETWEEN and it will just negate the complete logic over here.

44
00:04:46,000 --> 00:04:53,000
With the use of NOT keyword here, you will get every single row where actor_id is lower than 11 and actor_id

45
00:04:53,000 --> 00:05:00,000
is greater than 19. Let's evaluate that. Select the statement and click on Execute. Now let's go further down

46
00:05:00,000 --> 00:05:05,000
and you can see after 10, right after there is a value of 20. There is no other value in-between.

47
00:05:05,000 --> 00:05:12,000
It means rows with actor_id 11 and more and rows with actor_id 19 and less are all omitted. You can see the BETWEEN

48
00:05:12,000 --> 00:59:00,000
can be very powerful when we have to deal with range.

